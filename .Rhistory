library("coronavirus")
coronadata=coronavirus
coronadata
data("coronavirus")
names(coronavirus)
head(coronavirus)
tail(coronavirus)
dim(coronavirus)
library("dplyr")
summary_df <- coronavirus %>% group_by(Country.Region, type)
summary_df
summary_df <- coronavirus %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases))
summary_df
summary_df <- coronavirus %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df
summary_df <- coronavirus %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(total_cases)
summary_df
summary_df <- coronavirus %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df
summary_df %>% head(87)
summary_df %>% head(40)
summary_df
summary_df %>% print(40)
summary_df %>% print(n=40)
summary_df %>% print(n=60)
summary_df <- coronavirus %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(Country.Region)
summary_df
summary_df %>% print(n=60)
install.packages("cran")
install.packages("Cran")
install.packages("CRAN")
update_dataset()
update_dataset("coronavirus")
library("coronavirus")
data("coronavirus")
library("coronavirus")
update_dataset()
update.packages("coronvirus")
library("coronavirus")
data(coronavirus)
coronadata
head(coronavirus,1497)
head(coronavirus,100)
print(coronavirus,n=100)
print(coronavirus,n=1407)
livedata=read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv")
livedata
coronavirus=read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv")
coronavirus
summary_df <- coronavirus %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(Country.Region)
summary_df
summary_df %>% print(n=60)
livedata=read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv")
livedata
summary_df <- livedata %>% group_by(Country.Region, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(Country.Region)
summary_df <- livedata %>% group_by(country, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(country)
summary_df
summary_df %>% print(n=60)
summary_df %>% print(n=500)
recovery <- c(1:564)
recovery
cbind(coronavirus,recovery)
recovery <- c(1:101265)
recovery
cbind(coronavirus,recovery)
coronavirus$recovery[coronavirus$type == "recovered"]<-1
coronavirus$recovery[coronavirus$type != "recovered" ]<-0
names(coronavirus)
table(coronavirus$recovery)
library(caTools)
install.packages("CaTools")
library("caTools")
library("CaTools")
install.packages("caTools")
library("caTools")
set.seed(1)
split = sample.split(coronavirus$recovery, SplitRatio = 0.85)
dim(dfTrain)
dfTrain = subset(coronavirus, split == TRUE)
dfTest = subset(coronavirus, split == FALSE)
dim(dfTrain)
dim(dfTest)
table(dfTrain)
table(dfTrain$recovery)
table(dfTest$recovery)
dfTrain$recovery<-factor(dfTrain$recovery)
str(dfTrain)
table(dfTrain$recovery)
install.packages("ggplot2")
library("caret")
library("caret")
library(caret)
library("Caret")
install.packages("caret")
library("Caret")
library("caret")
library("ggplot2")
install.packages("caret")
library("caret")
install.packages("caret")
install.packages("caret")
library("caret")
control <- trainControl(method="repeatedcv", number=10, repeats=3)
control
model <- train(recovery~cases + Country.Region, data=dfTrain, method="glm", preProcess="scale", trControl=control)
model <- train(recovery~cases + country, data=dfTrain, method="glm", preProcess="scale", trControl=control)
model
model <- train(recovery~cases + country, data=dfTrain, method="glm", preProcess="scale")
model
model <- train(recovery~cases + country, data=dfTrain, method="glm")
livedata=read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv")
livedata
summary_df <- livedata %>% group_by(country, type) %>% summarise(total_cases = sum(cases)) %>%
arrange(country)
summary_df
summary_df %>% print(n=500)
recovery <- c(1:101265)
recovery
cbind(coronavirus,recovery)
coronavirus$recovery[coronavirus$type == "recovered"]<-1
coronavirus$recovery[coronavirus$type != "recovered" ]<-0
names(coronavirus)
table(coronavirus$recovery)
install.packages("caTools")
library("caTools")
set.seed(1)
split = sample.split(coronavirus$recovery, SplitRatio = 0.85)
dfTrain = subset(coronavirus, split == TRUE)
dfTest = subset(coronavirus, split == FALSE)
dim(dfTrain)
dim(dfTest)
table(dfTrain$recovery)
table(dfTest$recovery)
dfTrain$recovery<-factor(dfTrain$recovery)
str(dfTrain)
table(dfTrain$recovery)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library("caret")
control <- trainControl(method="repeatedcv", number=10, repeats=3)
control
model <- train(recovery~cases + country, data=dfTrain, method="glm")
install.packages('e1071', dependencies=TRUE)
model <- train(recovery~cases + country, data=dfTrain, method="glm")
model <- train(recovery~cases + country, data=dfTrain, method="glm", preProcess="scale", trControl=control)
install.packages("caret")
install.packages("caret")
library("caret")
control <- trainControl(method="repeatedcv", number=10, repeats=3)
control
model <- train(recovery~cases + country, data=dfTrain, method="glm", preProcess="scale", trControl=control)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("coronavirus")
install.packages("coronavirus")
library(coronavirus)
str(coronavirus)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
head(coronavirus)
?coronavirus
names(coronavirus)
ggplot(coronavirus,aes(x=Country.Region))+geom_bar()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(coronavirus,aes(x=Country.Region))+geom_bar()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=country))+geom_bar()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=Country.Region,y=cases,color=type))+geom_point()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=country,y=cases,color=type))+geom_point()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(data=coronavirus, aes(x=date,y=cases))+geom_smooth(se=F)+
ggtitle("Time Series") +
xlab("Cases") + ylab("Date")+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=country))+geom_bar()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=country,y=cases,color=type))+geom_point()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(data=coronavirus, aes(x=date,y=cases))+geom_smooth(se=F)+
ggtitle("Time Series") +
xlab("Cases") + ylab("Date")+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=country,y=cases,color=type))+geom_bar()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
ggplot(coronavirus,aes(x=country,y=cases,color=type))+geom_point()+
ggtitle("Cases by Countries") +
xlab("Countries") + ylab("No. of cases")+
ylim(0,100)+
theme(panel.background = (element_rect(color="red")),(element_blank()))
